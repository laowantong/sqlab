-- Generated by SQL Adventure Builder. Any changes will be overwritten.
-- See at the end of the file for more information.

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

DROP DATABASE IF EXISTS sqlab_company;
CREATE DATABASE sqlab_company DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

USE sqlab_company;

CREATE TABLE employee (
  emp_name VARCHAR(32) NOT NULL,
  emp_id CHAR(9) NOT NULL,
  birth DATE,
  address VARCHAR(30),
  sex ENUM('M', 'F'),
  salary DECIMAL(10,2),
  supervisor_id CHAR(9),
  dpt_id INT NOT NULL,
  hash BIGINT,
  PRIMARY KEY (emp_id)
);

CREATE TABLE department (
  dpt_name VARCHAR(15) NOT NULL,
  dpt_id INT NOT NULL,
  manager_id CHAR(9) NOT NULL,
  manager_start DATE,
  hash BIGINT,
  PRIMARY KEY (dpt_id),
  UNIQUE (dpt_name)
);

CREATE TABLE dpt_locations (
  dpt_id INT NOT NULL,
  location VARCHAR(15) NOT NULL,
  hash BIGINT,
  PRIMARY KEY (dpt_id, location)
);

CREATE TABLE project (
  prj_name VARCHAR(15) NOT NULL,
  prj_id INT NOT NULL,
  location VARCHAR(15),
  dpt_id INT NOT NULL,
  hash BIGINT,
  PRIMARY KEY (prj_id),
  UNIQUE (prj_name)
);

CREATE TABLE works_on (
  emp_id CHAR(9) NOT NULL,
  prj_id INT NOT NULL,
  hours DECIMAL(3,1) NOT NULL,
  hash BIGINT,
  PRIMARY KEY (emp_id, prj_id)
);

CREATE TABLE dependent (
  emp_id CHAR(9) NOT NULL,
  dpd_name VARCHAR(15) NOT NULL,
  sex ENUM('M', 'F'),
  birth DATE,
  relationship VARCHAR(8),
  hash BIGINT,
  PRIMARY KEY (emp_id, dpd_name)
);


CREATE FUNCTION nn(x BIGINT) RETURNS BIGINT DETERMINISTIC 
RETURN COALESCE(x, 42);

CREATE FUNCTION string_hash(string LONGTEXT)
RETURNS BIGINT DETERMINISTIC
RETURN CONV(LEFT(SHA2(string, 256), 10), 16, 10);

DELIMITER $$

CREATE FUNCTION decrypt(token BIGINT UNSIGNED)
RETURNS TEXT
DETERMINISTIC
BEGIN
    DECLARE message TEXT;
    DECLARE CONTINUE HANDLER FOR SQLWARNING
    BEGIN
        -- Just ignore the decoding warnings, since all are designed to fail (except at most one).
    END;

    SELECT
        COALESCE(
            MAX(CONVERT(UNCOMPRESS(AES_DECRYPT(msg, token)) USING utf8mb4)),
            CONVERT("ðŸ”´ No specific message is planned for this token. Possible reasons:
1. Copy-paste accident (double-click on the token to facilitate selection).
2. Formula for calculating the token not updated.
3. (0.0) still present, or replaced by the wrong value.
4. New logical error. Congratulations on your creativity! Now read the statement carefully and, if the symptoms persist, ask your teacher." USING utf8mb4) -- fallback message
        ) INTO message
    FROM sqlab_msg;

    RETURN message;
END;
$$

DELIMITER ;


CREATE FUNCTION salt_064(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 62972894145922;
CREATE FUNCTION salt_002(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 137861041508951;
CREATE FUNCTION salt_048(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 277826442907816;
CREATE FUNCTION salt_073(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 254165502646708;
CREATE FUNCTION salt_060(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 111976707881159;
CREATE FUNCTION salt_069(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 70797235173812;
CREATE FUNCTION salt_090(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 30497399158554;
CREATE FUNCTION salt_099(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 8310057461616;
CREATE FUNCTION salt_013(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 156428465252470;
CREATE FUNCTION salt_093(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 107856286707972;
CREATE FUNCTION salt_033(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 137815747202516;
CREATE FUNCTION salt_023(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 44360048025875;
CREATE FUNCTION salt_091(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 34119642900974;
CREATE FUNCTION salt_080(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 17686269106982;
CREATE FUNCTION salt_078(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 33142678222518;
CREATE FUNCTION salt_010(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 156609923390892;
CREATE FUNCTION salt_029(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 255246805321529;
CREATE FUNCTION salt_086(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 229157153283997;
CREATE FUNCTION salt_045(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 241186399284601;
CREATE FUNCTION salt_012(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 237909826945914;
CREATE FUNCTION salt_032(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 40195087246763;
CREATE FUNCTION salt_036(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 123633025696313;
CREATE FUNCTION salt_046(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 203785028705431;
CREATE FUNCTION salt_071(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 224610948522906;
CREATE FUNCTION salt_018(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 193629355598867;
CREATE FUNCTION salt_051(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 216604063521296;
CREATE FUNCTION salt_004(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 57701753774249;
CREATE FUNCTION salt_019(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 148913404103171;
CREATE FUNCTION salt_035(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 151966162615799;
CREATE FUNCTION salt_015(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 57536827559801;
CREATE FUNCTION salt_089(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 231427542066705;
CREATE FUNCTION salt_061(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 210492708649341;
CREATE FUNCTION salt_088(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 199451542642387;
CREATE FUNCTION salt_030(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 91565974725697;
CREATE FUNCTION salt_081(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 186014430728385;
CREATE FUNCTION salt_009(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 252880031239136;
CREATE FUNCTION salt_057(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 89036539348634;
CREATE FUNCTION salt_042(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 281044000101397;
CREATE FUNCTION salt_054(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 64487734458809;
CREATE FUNCTION salt_047(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 77876336435184;
CREATE FUNCTION salt_014(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 121208939839792;
CREATE FUNCTION salt_017(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 202087216605079;
CREATE FUNCTION salt_067(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 135596661288730;
CREATE FUNCTION salt_087(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 53099498484831;
CREATE FUNCTION salt_084(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 136796738484217;
CREATE FUNCTION salt_100(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 52505842033539;
CREATE FUNCTION salt_043(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 80429528338601;
CREATE FUNCTION salt_027(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 39155947983344;
CREATE FUNCTION salt_006(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 52742326372974;
CREATE FUNCTION salt_040(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 37259991231134;
CREATE FUNCTION salt_003(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 78551615559390;
CREATE FUNCTION salt_076(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 11842676901531;
CREATE FUNCTION salt_079(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 37942724390356;
CREATE FUNCTION salt_058(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 1827309829283;
CREATE FUNCTION salt_085(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 266261277495711;
CREATE FUNCTION salt_066(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 134798869348095;
CREATE FUNCTION salt_026(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 108248540469695;
CREATE FUNCTION salt_016(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 213876884779281;
CREATE FUNCTION salt_056(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 165223576022761;
CREATE FUNCTION salt_044(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 78603334135774;
CREATE FUNCTION salt_082(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 156767328526125;
CREATE FUNCTION salt_039(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 225835030251516;
CREATE FUNCTION salt_005(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 17890350928281;
CREATE FUNCTION salt_024(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 165045079279857;
CREATE FUNCTION salt_011(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 89879946603453;
CREATE FUNCTION salt_083(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 273265872478375;
CREATE FUNCTION salt_021(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 258633179837392;
CREATE FUNCTION salt_068(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 44336719546230;
CREATE FUNCTION salt_065(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 204341354522673;
CREATE FUNCTION salt_095(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 103295775436641;
CREATE FUNCTION salt_007(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 130975966734475;
CREATE FUNCTION salt_074(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 139556892058007;
CREATE FUNCTION salt_041(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 119697795103447;
CREATE FUNCTION salt_077(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 4046805019318;
CREATE FUNCTION salt_070(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 92958338575792;
CREATE FUNCTION salt_075(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 36044330615759;
CREATE FUNCTION salt_092(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 61516222468702;
CREATE FUNCTION salt_094(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 78913360909949;
CREATE FUNCTION salt_038(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 31489738141241;
CREATE FUNCTION salt_025(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 203585150833345;
CREATE FUNCTION salt_020(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 24463305340287;
CREATE FUNCTION salt_096(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 260435128269849;
CREATE FUNCTION salt_072(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 210215670540430;
CREATE FUNCTION salt_055(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 191502459736723;
CREATE FUNCTION salt_037(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 182556230345007;
CREATE FUNCTION salt_059(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 59905828584047;
CREATE FUNCTION salt_034(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 260228475305711;
CREATE FUNCTION salt_050(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 90063864090052;
CREATE FUNCTION salt_001(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 62674909100445;
CREATE FUNCTION salt_049(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 86041550780213;
CREATE FUNCTION salt_098(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 55119678938787;
CREATE FUNCTION salt_008(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 236169707210998;
CREATE FUNCTION salt_052(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 263491931983769;
CREATE FUNCTION salt_028(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 213988589386448;
CREATE FUNCTION salt_062(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 90944912484449;
CREATE FUNCTION salt_063(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 275059687810107;
CREATE FUNCTION salt_053(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 141534329833897;
CREATE FUNCTION salt_022(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 70272263011973;
CREATE FUNCTION salt_031(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 200001037020680;
CREATE FUNCTION salt_097(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 42438242280060;


DROP TRIGGER IF EXISTS before_insert_dpt_locations;
CREATE TRIGGER before_insert_dpt_locations
BEFORE INSERT ON dpt_locations
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("dpt_locations", NEW.dpt_id, NEW.location) AS CHAR));

DROP TRIGGER IF EXISTS before_update_dpt_locations;
CREATE TRIGGER before_update_dpt_locations
BEFORE UPDATE ON dpt_locations
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("dpt_locations", NEW.dpt_id, NEW.location) AS CHAR));

TRUNCATE TABLE dpt_locations;

INSERT INTO dpt_locations (dpt_id, location) VALUES
  (1, 'Houston'),
  (4, 'Stafford'),
  (5, 'Bellaire'),
  (5, 'Sugarland'),
  (5, 'Houston')
;
DROP TRIGGER IF EXISTS before_insert_works_on;
CREATE TRIGGER before_insert_works_on
BEFORE INSERT ON works_on
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("works_on", NEW.emp_id, NEW.prj_id, NEW.hours) AS CHAR));

DROP TRIGGER IF EXISTS before_update_works_on;
CREATE TRIGGER before_update_works_on
BEFORE UPDATE ON works_on
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("works_on", NEW.emp_id, NEW.prj_id, NEW.hours) AS CHAR));

TRUNCATE TABLE works_on;

INSERT INTO works_on (emp_id, prj_id, hours) VALUES
  (123456789, 1, 32.5),
  (123456789, 2, 7.5),
  (666884444, 3, 40.0),
  (453453453, 1, 20.0),
  (453453453, 2, 20.0),
  (333445555, 2, 10.0),
  (333445555, 3, 10.0),
  (333445555, 10, 10.0),
  (333445555, 20, 10.0),
  (999887777, 30, 30.0),
  (999887777, 10, 10.0),
  (987987987, 10, 35.0),
  (987987987, 30, 5.0),
  (987654321, 30, 20.0),
  (987654321, 20, 15.0),
  (888665555, 20, 16.0)
;
DROP TRIGGER IF EXISTS before_insert_department;
CREATE TRIGGER before_insert_department
BEFORE INSERT ON department
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("department", NEW.dpt_name, NEW.dpt_id, NEW.manager_id, NEW.manager_start) AS CHAR));

DROP TRIGGER IF EXISTS before_update_department;
CREATE TRIGGER before_update_department
BEFORE UPDATE ON department
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("department", NEW.dpt_name, NEW.dpt_id, NEW.manager_id, NEW.manager_start) AS CHAR));

TRUNCATE TABLE department;

INSERT INTO department (dpt_name, dpt_id, manager_id, manager_start) VALUES
  ('Research', 5, 333445555, '1988-05-22'),
  ('Administration', 4, 987654321, '1995-01-01'),
  ('Headquarters', 1, 888665555, '1981-06-19')
;
DROP TRIGGER IF EXISTS before_insert_dependent;
CREATE TRIGGER before_insert_dependent
BEFORE INSERT ON dependent
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("dependent", NEW.emp_id, NEW.dpd_name, NEW.sex, NEW.birth, NEW.relationship) AS CHAR));

DROP TRIGGER IF EXISTS before_update_dependent;
CREATE TRIGGER before_update_dependent
BEFORE UPDATE ON dependent
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("dependent", NEW.emp_id, NEW.dpd_name, NEW.sex, NEW.birth, NEW.relationship) AS CHAR));

TRUNCATE TABLE dependent;

INSERT INTO dependent (emp_id, dpd_name, sex, birth, relationship) VALUES
  (333445555, 'Alice', 'F', '1986-04-04', 'Daughter'),
  (333445555, 'Theodore', 'M', '1983-10-25', 'Son'),
  (333445555, 'Joy', 'F', '1958-05-03', 'Spouse'),
  (987654321, 'Abner', 'M', '1942-02-28', 'Spouse'),
  (123456789, 'Michael', 'M', '1988-01-04', 'Son'),
  (123456789, 'Alice', 'F', '1988-12-30', 'Daughter'),
  (123456789, 'Elizabeth', 'F', '1967-05-05', 'Spouse')
;
DROP TRIGGER IF EXISTS before_insert_project;
CREATE TRIGGER before_insert_project
BEFORE INSERT ON project
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("project", NEW.prj_name, NEW.prj_id, NEW.location, NEW.dpt_id) AS CHAR));

DROP TRIGGER IF EXISTS before_update_project;
CREATE TRIGGER before_update_project
BEFORE UPDATE ON project
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("project", NEW.prj_name, NEW.prj_id, NEW.location, NEW.dpt_id) AS CHAR));

TRUNCATE TABLE project;

INSERT INTO project (prj_name, prj_id, location, dpt_id) VALUES
  ('ProductX', 1, 'Bellaire', 5),
  ('ProductY', 2, 'Sugarland', 5),
  ('ProductZ', 3, 'Houston', 5),
  ('Computerization', 10, 'Stafford', 4),
  ('Reorganization', 20, 'Houston', 1),
  ('Newbenefits', 30, 'Stafford', 4)
;
DROP TRIGGER IF EXISTS before_insert_employee;
CREATE TRIGGER before_insert_employee
BEFORE INSERT ON employee
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("employee", NEW.emp_name, NEW.emp_id, NEW.birth, NEW.address, NEW.sex, NEW.salary, NEW.supervisor_id, NEW.dpt_id) AS CHAR));

DROP TRIGGER IF EXISTS before_update_employee;
CREATE TRIGGER before_update_employee
BEFORE UPDATE ON employee
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("employee", NEW.emp_name, NEW.emp_id, NEW.birth, NEW.address, NEW.sex, NEW.salary, NEW.supervisor_id, NEW.dpt_id) AS CHAR));

TRUNCATE TABLE employee;

INSERT INTO employee (emp_name, emp_id, birth, address, sex, salary, supervisor_id, dpt_id) VALUES
  ('John B. Smith', 123456789, '1965-01-09', '731 Fondren, Houston TX', 'M', 30000, 333445555, 5),
  ('Franklin T. Wong', 333445555, '1965-12-08', '638 Voss, Houston TX', 'M', 40000, 888665555, 5),
  ('Alicia J. Zelaya', 999887777, '1968-01-19', '3321 Castle, Spring TX', 'F', 25000, 987654321, 4),
  ('Jennifer S. Wallace', 987654321, '1941-06-20', '291 Berry, Bellaire TX', 'F', 43000, 888665555, 4),
  ('Ramesh K. Narayan', 666884444, '1962-09-15', '975 Fire Oak, Humble TX', 'M', 38000, 333445555, 5),
  ('Joyce A. English', 453453453, '1972-07-31', '5631 Rice, Houston TX', 'F', 25000, 333445555, 5),
  ('Ahmad V. Jabbar', 987987987, '1969-03-29', '980 Dallas, Houston TX', 'M', 25000, 987654321, 4),
  ('James E. Borg', 888665555, '1937-11-10', '450 Stone, Houston TX', 'M', 55000, NULL, 1)
;


ALTER TABLE department
  ADD CONSTRAINT fk_department_manager FOREIGN KEY (manager_id) REFERENCES employee(emp_id);

ALTER TABLE dpt_locations
  ADD CONSTRAINT fk_dpt_locations_dpt FOREIGN KEY (dpt_id) REFERENCES department(dpt_id);

ALTER TABLE project
  ADD CONSTRAINT fk_prj_dpt FOREIGN KEY (dpt_id) REFERENCES department(dpt_id);

ALTER TABLE works_on
  ADD CONSTRAINT fk_works_on_emp FOREIGN KEY (emp_id) REFERENCES employee(emp_id),
  ADD CONSTRAINT fk_works_on_prj FOREIGN KEY (prj_id) REFERENCES project(prj_id);

ALTER TABLE dependent
  ADD CONSTRAINT fk_dpd_emp FOREIGN KEY (emp_id) REFERENCES employee(emp_id);

ALTER TABLE employee
  ADD CONSTRAINT fk_employee_dpt FOREIGN KEY (dpt_id) REFERENCES department(dpt_id),
  ADD CONSTRAINT fk_employee_supervisor FOREIGN KEY (supervisor_id) REFERENCES employee(emp_id);

